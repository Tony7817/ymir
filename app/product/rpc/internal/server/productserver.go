// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1
// Source: product.proto

package server

import (
	"context"

	"ymir.com/app/product/rpc/internal/logic"
	"ymir.com/app/product/rpc/internal/svc"
	"ymir.com/app/product/rpc/product"
)

type ProductServer struct {
	svcCtx *svc.ServiceContext
	product.UnimplementedProductServer
}

func NewProductServer(svcCtx *svc.ServiceContext) *ProductServer {
	return &ProductServer{
		svcCtx: svcCtx,
	}
}

func (s *ProductServer) ProductList(ctx context.Context, in *product.ProductListRequest) (*product.ProductListResponse, error) {
	l := logic.NewProductListLogic(ctx, s.svcCtx)
	return l.ProductList(in)
}

func (s *ProductServer) ProductDetail(ctx context.Context, in *product.ProductDetailReqeust) (*product.ProductDetailResponse, error) {
	l := logic.NewProductDetailLogic(ctx, s.svcCtx)
	return l.ProductDetail(in)
}

func (s *ProductServer) ProductsInCartList(ctx context.Context, in *product.ProductsInCartListRequest) (*product.ProducrtsInCartListResponse, error) {
	l := logic.NewProductsInCartListLogic(ctx, s.svcCtx)
	return l.ProductsInCartList(in)
}

func (s *ProductServer) AddProductAmountInCart(ctx context.Context, in *product.AddProductAmountInCartRequest) (*product.AddProductAmountInCartResponse, error) {
	l := logic.NewAddProductAmountInCartLogic(ctx, s.svcCtx)
	return l.AddProductAmountInCart(in)
}

func (s *ProductServer) DecreaseProductAmountInCart(ctx context.Context, in *product.DecreaseProductAmountInCartRequest) (*product.AddProductAmountInCartResponse, error) {
	l := logic.NewDecreaseProductAmountInCartLogic(ctx, s.svcCtx)
	return l.DecreaseProductAmountInCart(in)
}

func (s *ProductServer) AddProductToCart(ctx context.Context, in *product.AddProductToCartRequest) (*product.AddProductToCartResponse, error) {
	l := logic.NewAddProductToCartLogic(ctx, s.svcCtx)
	return l.AddProductToCart(in)
}

func (s *ProductServer) RemoveProductFromCart(ctx context.Context, in *product.RemoveProductFromCartRequest) (*product.RemoveProductFromCartResponse, error) {
	l := logic.NewRemoveProductFromCartLogic(ctx, s.svcCtx)
	return l.RemoveProductFromCart(in)
}

func (s *ProductServer) ProductStock(ctx context.Context, in *product.ProductStockRequest) (*product.ProductStockResponse, error) {
	l := logic.NewProductStockLogic(ctx, s.svcCtx)
	return l.ProductStock(in)
}

func (s *ProductServer) ProductColor(ctx context.Context, in *product.ProductColorRequest) (*product.ProductColorResponse, error) {
	l := logic.NewProductColorLogic(ctx, s.svcCtx)
	return l.ProductColor(in)
}

func (s *ProductServer) ProductColorList(ctx context.Context, in *product.ProductColorListRequest) (*product.ProductColorListResponse, error) {
	l := logic.NewProductColorListLogic(ctx, s.svcCtx)
	return l.ProductColorList(in)
}

func (s *ProductServer) ProductCommentList(ctx context.Context, in *product.ProductCommentListRequest) (*product.ProductCommentListResponse, error) {
	l := logic.NewProductCommentListLogic(ctx, s.svcCtx)
	return l.ProductCommentList(in)
}

func (s *ProductServer) IncreaseProductStockOfOrder(ctx context.Context, in *product.DecreaseProductStockRequest) (*product.DecreaseProductStockResponse, error) {
	l := logic.NewIncreaseProductStockOfOrderLogic(ctx, s.svcCtx)
	return l.IncreaseProductStockOfOrder(in)
}

func (s *ProductServer) DecreaseProductStockOfOrder(ctx context.Context, in *product.DecreaseProductStockRequest) (*product.DecreaseProductStockResponse, error) {
	l := logic.NewDecreaseProductStockOfOrderLogic(ctx, s.svcCtx)
	return l.DecreaseProductStockOfOrder(in)
}

func (s *ProductServer) CheckoutProduct(ctx context.Context, in *product.CheckoutProductRequest) (*product.CheckoutProductResponse, error) {
	l := logic.NewCheckoutProductLogic(ctx, s.svcCtx)
	return l.CheckoutProduct(in)
}

func (s *ProductServer) CheckoutProductRollback(ctx context.Context, in *product.CheckoutProductRequest) (*product.CheckoutProductResponse, error) {
	l := logic.NewCheckoutProductRollbackLogic(ctx, s.svcCtx)
	return l.CheckoutProductRollback(in)
}
