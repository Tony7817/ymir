// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productCommentImageFieldNames          = builder.RawFieldNames(&ProductCommentImage{})
	productCommentImageRows                = strings.Join(productCommentImageFieldNames, ",")
	productCommentImageRowsExpectAutoSet   = strings.Join(stringx.Remove(productCommentImageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productCommentImageRowsWithPlaceHolder = strings.Join(stringx.Remove(productCommentImageFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirProductCommentImageIdPrefix = "cache:ymir:productCommentImage:id:"
)

type (
	productCommentImageModel interface {
		Insert(ctx context.Context, data *ProductCommentImage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductCommentImage, error)
		Update(ctx context.Context, data *ProductCommentImage) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductCommentImageModel struct {
		sqlc.CachedConn
		table string
	}

	ProductCommentImage struct {
		Id            int64     `db:"id"`
		CommentId     int64     `db:"comment_id"`
		CreatedAt     time.Time `db:"created_at"`
		UpdatedAt     time.Time `db:"updated_at"`
		ImageThumbUrl string    `db:"image_thumb_url"`
		ImageUrl      string    `db:"image_url"`
	}
)

func newProductCommentImageModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProductCommentImageModel {
	return &defaultProductCommentImageModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`product_comment_image`",
	}
}

func (m *defaultProductCommentImageModel) Delete(ctx context.Context, id int64) error {
	ymirProductCommentImageIdKey := fmt.Sprintf("%s%v", cacheYmirProductCommentImageIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirProductCommentImageIdKey)
	return err
}

func (m *defaultProductCommentImageModel) FindOne(ctx context.Context, id int64) (*ProductCommentImage, error) {
	ymirProductCommentImageIdKey := fmt.Sprintf("%s%v", cacheYmirProductCommentImageIdPrefix, id)
	var resp ProductCommentImage
	err := m.QueryRowCtx(ctx, &resp, ymirProductCommentImageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productCommentImageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductCommentImageModel) Insert(ctx context.Context, data *ProductCommentImage) (sql.Result, error) {
	ymirProductCommentImageIdKey := fmt.Sprintf("%s%v", cacheYmirProductCommentImageIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, productCommentImageRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CommentId, data.ImageThumbUrl, data.ImageUrl)
	}, ymirProductCommentImageIdKey)
	return ret, err
}

func (m *defaultProductCommentImageModel) Update(ctx context.Context, data *ProductCommentImage) error {
	ymirProductCommentImageIdKey := fmt.Sprintf("%s%v", cacheYmirProductCommentImageIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productCommentImageRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CommentId, data.ImageThumbUrl, data.ImageUrl, data.Id)
	}, ymirProductCommentImageIdKey)
	return err
}

func (m *defaultProductCommentImageModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirProductCommentImageIdPrefix, primary)
}

func (m *defaultProductCommentImageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productCommentImageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductCommentImageModel) tableName() string {
	return m.table
}
