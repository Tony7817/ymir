// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productCartFieldNames          = builder.RawFieldNames(&ProductCart{})
	productCartRows                = strings.Join(productCartFieldNames, ",")
	productCartRowsExpectAutoSet   = strings.Join(stringx.Remove(productCartFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productCartRowsWithPlaceHolder = strings.Join(stringx.Remove(productCartFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirProductCartIdPrefix                   = "cache:ymir:productCart:id:"
	cacheYmirProductCartProductIdUserIdColorPrefix = "cache:ymir:productCart:productId:userId:color:"
)

type (
	productCartModel interface {
		Insert(ctx context.Context, data *ProductCart) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductCart, error)
		FindOneByProductIdUserIdColor(ctx context.Context, productId int64, userId int64, color string) (*ProductCart, error)
		Update(ctx context.Context, data *ProductCart) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductCartModel struct {
		sqlc.CachedConn
		table string
	}

	ProductCart struct {
		Id        int64     `db:"id"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
		ProductId int64     `db:"product_id"`
		UserId    int64     `db:"user_id"`
		Color     string    `db:"color"`
		Amount    int64     `db:"amount"`
		IsDeleted int64     `db:"is_deleted"`
		Size      string    `db:"size"`
	}
)

func newProductCartModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProductCartModel {
	return &defaultProductCartModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`product_cart`",
	}
}

func (m *defaultProductCartModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ymirProductCartIdKey := fmt.Sprintf("%s%v", cacheYmirProductCartIdPrefix, id)
	ymirProductCartProductIdUserIdColorKey := fmt.Sprintf("%s%v:%v:%v", cacheYmirProductCartProductIdUserIdColorPrefix, data.ProductId, data.UserId, data.Color)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirProductCartIdKey, ymirProductCartProductIdUserIdColorKey)
	return err
}

func (m *defaultProductCartModel) FindOne(ctx context.Context, id int64) (*ProductCart, error) {
	ymirProductCartIdKey := fmt.Sprintf("%s%v", cacheYmirProductCartIdPrefix, id)
	var resp ProductCart
	err := m.QueryRowCtx(ctx, &resp, ymirProductCartIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productCartRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductCartModel) FindOneByProductIdUserIdColor(ctx context.Context, productId int64, userId int64, color string) (*ProductCart, error) {
	ymirProductCartProductIdUserIdColorKey := fmt.Sprintf("%s%v:%v:%v", cacheYmirProductCartProductIdUserIdColorPrefix, productId, userId, color)
	var resp ProductCart
	err := m.QueryRowIndexCtx(ctx, &resp, ymirProductCartProductIdUserIdColorKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `product_id` = ? and `user_id` = ? and `color` = ? limit 1", productCartRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, productId, userId, color); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductCartModel) Insert(ctx context.Context, data *ProductCart) (sql.Result, error) {
	ymirProductCartIdKey := fmt.Sprintf("%s%v", cacheYmirProductCartIdPrefix, data.Id)
	ymirProductCartProductIdUserIdColorKey := fmt.Sprintf("%s%v:%v:%v", cacheYmirProductCartProductIdUserIdColorPrefix, data.ProductId, data.UserId, data.Color)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, productCartRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProductId, data.UserId, data.Color, data.Amount, data.IsDeleted, data.Size)
	}, ymirProductCartIdKey, ymirProductCartProductIdUserIdColorKey)
	return ret, err
}

func (m *defaultProductCartModel) Update(ctx context.Context, newData *ProductCart) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ymirProductCartIdKey := fmt.Sprintf("%s%v", cacheYmirProductCartIdPrefix, data.Id)
	ymirProductCartProductIdUserIdColorKey := fmt.Sprintf("%s%v:%v:%v", cacheYmirProductCartProductIdUserIdColorPrefix, data.ProductId, data.UserId, data.Color)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productCartRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ProductId, newData.UserId, newData.Color, newData.Amount, newData.IsDeleted, newData.Size, newData.Id)
	}, ymirProductCartIdKey, ymirProductCartProductIdUserIdColorKey)
	return err
}

func (m *defaultProductCartModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirProductCartIdPrefix, primary)
}

func (m *defaultProductCartModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productCartRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductCartModel) tableName() string {
	return m.table
}
