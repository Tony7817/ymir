// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productStockFieldNames          = builder.RawFieldNames(&ProductStock{})
	productStockRows                = strings.Join(productStockFieldNames, ",")
	productStockRowsExpectAutoSet   = strings.Join(stringx.Remove(productStockFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productStockRowsWithPlaceHolder = strings.Join(stringx.Remove(productStockFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirProductStockIdPrefix             = "cache:ymir:productStock:id:"
	cacheYmirProductStockProductIdColorPrefix = "cache:ymir:productStock:productId:color:"
)

type (
	productStockModel interface {
		Insert(ctx context.Context, data *ProductStock) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductStock, error)
		FindOneByProductIdColor(ctx context.Context, productId int64, color string) (*ProductStock, error)
		Update(ctx context.Context, data *ProductStock) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductStockModel struct {
		sqlc.CachedConn
		table string
	}

	ProductStock struct {
		Id        int64  `db:"id"`
		ProductId int64  `db:"product_id"`
		Color     string `db:"color"`
		InStock   int64  `db:"in_stock"`
	}
)

func newProductStockModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProductStockModel {
	return &defaultProductStockModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`product_stock`",
	}
}

func (m *defaultProductStockModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ymirProductStockIdKey := fmt.Sprintf("%s%v", cacheYmirProductStockIdPrefix, id)
	ymirProductStockProductIdColorKey := fmt.Sprintf("%s%v:%v", cacheYmirProductStockProductIdColorPrefix, data.ProductId, data.Color)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirProductStockIdKey, ymirProductStockProductIdColorKey)
	return err
}

func (m *defaultProductStockModel) FindOne(ctx context.Context, id int64) (*ProductStock, error) {
	ymirProductStockIdKey := fmt.Sprintf("%s%v", cacheYmirProductStockIdPrefix, id)
	var resp ProductStock
	err := m.QueryRowCtx(ctx, &resp, ymirProductStockIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productStockRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductStockModel) FindOneByProductIdColor(ctx context.Context, productId int64, color string) (*ProductStock, error) {
	ymirProductStockProductIdColorKey := fmt.Sprintf("%s%v:%v", cacheYmirProductStockProductIdColorPrefix, productId, color)
	var resp ProductStock
	err := m.QueryRowIndexCtx(ctx, &resp, ymirProductStockProductIdColorKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `product_id` = ? and `color` = ? limit 1", productStockRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, productId, color); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductStockModel) Insert(ctx context.Context, data *ProductStock) (sql.Result, error) {
	ymirProductStockIdKey := fmt.Sprintf("%s%v", cacheYmirProductStockIdPrefix, data.Id)
	ymirProductStockProductIdColorKey := fmt.Sprintf("%s%v:%v", cacheYmirProductStockProductIdColorPrefix, data.ProductId, data.Color)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, productStockRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProductId, data.Color, data.InStock)
	}, ymirProductStockIdKey, ymirProductStockProductIdColorKey)
	return ret, err
}

func (m *defaultProductStockModel) Update(ctx context.Context, newData *ProductStock) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ymirProductStockIdKey := fmt.Sprintf("%s%v", cacheYmirProductStockIdPrefix, data.Id)
	ymirProductStockProductIdColorKey := fmt.Sprintf("%s%v:%v", cacheYmirProductStockProductIdColorPrefix, data.ProductId, data.Color)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productStockRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ProductId, newData.Color, newData.InStock, newData.Id)
	}, ymirProductStockIdKey, ymirProductStockProductIdColorKey)
	return err
}

func (m *defaultProductStockModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirProductStockIdPrefix, primary)
}

func (m *defaultProductStockModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productStockRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductStockModel) tableName() string {
	return m.table
}
