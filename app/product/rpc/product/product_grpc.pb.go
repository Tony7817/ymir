// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Product_ProductList_FullMethodName                 = "/product.Product/ProductList"
	Product_ProductDetail_FullMethodName               = "/product.Product/ProductDetail"
	Product_ProductsInCartList_FullMethodName          = "/product.Product/ProductsInCartList"
	Product_AddProductAmountInCart_FullMethodName      = "/product.Product/AddProductAmountInCart"
	Product_DecreaseProductAmountInCart_FullMethodName = "/product.Product/DecreaseProductAmountInCart"
	Product_AddProductToCart_FullMethodName            = "/product.Product/AddProductToCart"
	Product_RemoveProductFromCart_FullMethodName       = "/product.Product/RemoveProductFromCart"
	Product_ProductStock_FullMethodName                = "/product.Product/ProductStock"
	Product_ProductColor_FullMethodName                = "/product.Product/ProductColor"
	Product_ProductColorList_FullMethodName            = "/product.Product/ProductColorList"
	Product_ProductCommentList_FullMethodName          = "/product.Product/ProductCommentList"
	Product_IncreaseProductStockOfOrder_FullMethodName = "/product.Product/IncreaseProductStockOfOrder"
	Product_DecreaseProductStockOfOrder_FullMethodName = "/product.Product/DecreaseProductStockOfOrder"
)

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {
	ProductList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListResponse, error)
	ProductDetail(ctx context.Context, in *ProductDetailReqeust, opts ...grpc.CallOption) (*ProductDetailResponse, error)
	ProductsInCartList(ctx context.Context, in *ProductsInCartListRequest, opts ...grpc.CallOption) (*ProducrtsInCartListResponse, error)
	AddProductAmountInCart(ctx context.Context, in *AddProductAmountInCartRequest, opts ...grpc.CallOption) (*AddProductAmountInCartResponse, error)
	DecreaseProductAmountInCart(ctx context.Context, in *DecreaseProductAmountInCartRequest, opts ...grpc.CallOption) (*AddProductAmountInCartResponse, error)
	AddProductToCart(ctx context.Context, in *AddProductToCartRequest, opts ...grpc.CallOption) (*AddProductToCartResponse, error)
	RemoveProductFromCart(ctx context.Context, in *RemoveProductFromCartRequest, opts ...grpc.CallOption) (*RemoveProductFromCartResponse, error)
	ProductStock(ctx context.Context, in *ProductStockRequest, opts ...grpc.CallOption) (*ProductStockResponse, error)
	ProductColor(ctx context.Context, in *ProductColorRequest, opts ...grpc.CallOption) (*ProductColorResponse, error)
	ProductColorList(ctx context.Context, in *ProductColorListRequest, opts ...grpc.CallOption) (*ProductColorListResponse, error)
	ProductCommentList(ctx context.Context, in *ProductCommentListRequest, opts ...grpc.CallOption) (*ProductCommentListResponse, error)
	IncreaseProductStockOfOrder(ctx context.Context, in *DecreaseProductStockRequest, opts ...grpc.CallOption) (*DecreaseProductStockResponse, error)
	DecreaseProductStockOfOrder(ctx context.Context, in *DecreaseProductStockRequest, opts ...grpc.CallOption) (*DecreaseProductStockResponse, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) ProductList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductListResponse)
	err := c.cc.Invoke(ctx, Product_ProductList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductDetail(ctx context.Context, in *ProductDetailReqeust, opts ...grpc.CallOption) (*ProductDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductDetailResponse)
	err := c.cc.Invoke(ctx, Product_ProductDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductsInCartList(ctx context.Context, in *ProductsInCartListRequest, opts ...grpc.CallOption) (*ProducrtsInCartListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProducrtsInCartListResponse)
	err := c.cc.Invoke(ctx, Product_ProductsInCartList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AddProductAmountInCart(ctx context.Context, in *AddProductAmountInCartRequest, opts ...grpc.CallOption) (*AddProductAmountInCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductAmountInCartResponse)
	err := c.cc.Invoke(ctx, Product_AddProductAmountInCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DecreaseProductAmountInCart(ctx context.Context, in *DecreaseProductAmountInCartRequest, opts ...grpc.CallOption) (*AddProductAmountInCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductAmountInCartResponse)
	err := c.cc.Invoke(ctx, Product_DecreaseProductAmountInCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AddProductToCart(ctx context.Context, in *AddProductToCartRequest, opts ...grpc.CallOption) (*AddProductToCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddProductToCartResponse)
	err := c.cc.Invoke(ctx, Product_AddProductToCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) RemoveProductFromCart(ctx context.Context, in *RemoveProductFromCartRequest, opts ...grpc.CallOption) (*RemoveProductFromCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveProductFromCartResponse)
	err := c.cc.Invoke(ctx, Product_RemoveProductFromCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductStock(ctx context.Context, in *ProductStockRequest, opts ...grpc.CallOption) (*ProductStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductStockResponse)
	err := c.cc.Invoke(ctx, Product_ProductStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductColor(ctx context.Context, in *ProductColorRequest, opts ...grpc.CallOption) (*ProductColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductColorResponse)
	err := c.cc.Invoke(ctx, Product_ProductColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductColorList(ctx context.Context, in *ProductColorListRequest, opts ...grpc.CallOption) (*ProductColorListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductColorListResponse)
	err := c.cc.Invoke(ctx, Product_ProductColorList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProductCommentList(ctx context.Context, in *ProductCommentListRequest, opts ...grpc.CallOption) (*ProductCommentListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductCommentListResponse)
	err := c.cc.Invoke(ctx, Product_ProductCommentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) IncreaseProductStockOfOrder(ctx context.Context, in *DecreaseProductStockRequest, opts ...grpc.CallOption) (*DecreaseProductStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecreaseProductStockResponse)
	err := c.cc.Invoke(ctx, Product_IncreaseProductStockOfOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DecreaseProductStockOfOrder(ctx context.Context, in *DecreaseProductStockRequest, opts ...grpc.CallOption) (*DecreaseProductStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecreaseProductStockResponse)
	err := c.cc.Invoke(ctx, Product_DecreaseProductStockOfOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility.
type ProductServer interface {
	ProductList(context.Context, *ProductListRequest) (*ProductListResponse, error)
	ProductDetail(context.Context, *ProductDetailReqeust) (*ProductDetailResponse, error)
	ProductsInCartList(context.Context, *ProductsInCartListRequest) (*ProducrtsInCartListResponse, error)
	AddProductAmountInCart(context.Context, *AddProductAmountInCartRequest) (*AddProductAmountInCartResponse, error)
	DecreaseProductAmountInCart(context.Context, *DecreaseProductAmountInCartRequest) (*AddProductAmountInCartResponse, error)
	AddProductToCart(context.Context, *AddProductToCartRequest) (*AddProductToCartResponse, error)
	RemoveProductFromCart(context.Context, *RemoveProductFromCartRequest) (*RemoveProductFromCartResponse, error)
	ProductStock(context.Context, *ProductStockRequest) (*ProductStockResponse, error)
	ProductColor(context.Context, *ProductColorRequest) (*ProductColorResponse, error)
	ProductColorList(context.Context, *ProductColorListRequest) (*ProductColorListResponse, error)
	ProductCommentList(context.Context, *ProductCommentListRequest) (*ProductCommentListResponse, error)
	IncreaseProductStockOfOrder(context.Context, *DecreaseProductStockRequest) (*DecreaseProductStockResponse, error)
	DecreaseProductStockOfOrder(context.Context, *DecreaseProductStockRequest) (*DecreaseProductStockResponse, error)
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductServer struct{}

func (UnimplementedProductServer) ProductList(context.Context, *ProductListRequest) (*ProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductList not implemented")
}
func (UnimplementedProductServer) ProductDetail(context.Context, *ProductDetailReqeust) (*ProductDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductDetail not implemented")
}
func (UnimplementedProductServer) ProductsInCartList(context.Context, *ProductsInCartListRequest) (*ProducrtsInCartListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductsInCartList not implemented")
}
func (UnimplementedProductServer) AddProductAmountInCart(context.Context, *AddProductAmountInCartRequest) (*AddProductAmountInCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductAmountInCart not implemented")
}
func (UnimplementedProductServer) DecreaseProductAmountInCart(context.Context, *DecreaseProductAmountInCartRequest) (*AddProductAmountInCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreaseProductAmountInCart not implemented")
}
func (UnimplementedProductServer) AddProductToCart(context.Context, *AddProductToCartRequest) (*AddProductToCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToCart not implemented")
}
func (UnimplementedProductServer) RemoveProductFromCart(context.Context, *RemoveProductFromCartRequest) (*RemoveProductFromCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProductFromCart not implemented")
}
func (UnimplementedProductServer) ProductStock(context.Context, *ProductStockRequest) (*ProductStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductStock not implemented")
}
func (UnimplementedProductServer) ProductColor(context.Context, *ProductColorRequest) (*ProductColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductColor not implemented")
}
func (UnimplementedProductServer) ProductColorList(context.Context, *ProductColorListRequest) (*ProductColorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductColorList not implemented")
}
func (UnimplementedProductServer) ProductCommentList(context.Context, *ProductCommentListRequest) (*ProductCommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCommentList not implemented")
}
func (UnimplementedProductServer) IncreaseProductStockOfOrder(context.Context, *DecreaseProductStockRequest) (*DecreaseProductStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseProductStockOfOrder not implemented")
}
func (UnimplementedProductServer) DecreaseProductStockOfOrder(context.Context, *DecreaseProductStockRequest) (*DecreaseProductStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreaseProductStockOfOrder not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}
func (UnimplementedProductServer) testEmbeddedByValue()                 {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	// If the following call pancis, it indicates UnimplementedProductServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_ProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProductList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductList(ctx, req.(*ProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDetailReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProductDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductDetail(ctx, req.(*ProductDetailReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductsInCartList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductsInCartListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductsInCartList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProductsInCartList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductsInCartList(ctx, req.(*ProductsInCartListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AddProductAmountInCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductAmountInCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AddProductAmountInCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_AddProductAmountInCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AddProductAmountInCart(ctx, req.(*AddProductAmountInCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DecreaseProductAmountInCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecreaseProductAmountInCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DecreaseProductAmountInCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DecreaseProductAmountInCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DecreaseProductAmountInCart(ctx, req.(*DecreaseProductAmountInCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AddProductToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductToCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AddProductToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_AddProductToCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AddProductToCart(ctx, req.(*AddProductToCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_RemoveProductFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProductFromCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).RemoveProductFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_RemoveProductFromCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).RemoveProductFromCart(ctx, req.(*RemoveProductFromCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProductStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductStock(ctx, req.(*ProductStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProductColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductColor(ctx, req.(*ProductColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductColorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductColorListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductColorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProductColorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductColorList(ctx, req.(*ProductColorListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProductCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProductCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProductCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProductCommentList(ctx, req.(*ProductCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_IncreaseProductStockOfOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecreaseProductStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).IncreaseProductStockOfOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_IncreaseProductStockOfOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).IncreaseProductStockOfOrder(ctx, req.(*DecreaseProductStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DecreaseProductStockOfOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecreaseProductStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DecreaseProductStockOfOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DecreaseProductStockOfOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DecreaseProductStockOfOrder(ctx, req.(*DecreaseProductStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProductList",
			Handler:    _Product_ProductList_Handler,
		},
		{
			MethodName: "ProductDetail",
			Handler:    _Product_ProductDetail_Handler,
		},
		{
			MethodName: "ProductsInCartList",
			Handler:    _Product_ProductsInCartList_Handler,
		},
		{
			MethodName: "AddProductAmountInCart",
			Handler:    _Product_AddProductAmountInCart_Handler,
		},
		{
			MethodName: "DecreaseProductAmountInCart",
			Handler:    _Product_DecreaseProductAmountInCart_Handler,
		},
		{
			MethodName: "AddProductToCart",
			Handler:    _Product_AddProductToCart_Handler,
		},
		{
			MethodName: "RemoveProductFromCart",
			Handler:    _Product_RemoveProductFromCart_Handler,
		},
		{
			MethodName: "ProductStock",
			Handler:    _Product_ProductStock_Handler,
		},
		{
			MethodName: "ProductColor",
			Handler:    _Product_ProductColor_Handler,
		},
		{
			MethodName: "ProductColorList",
			Handler:    _Product_ProductColorList_Handler,
		},
		{
			MethodName: "ProductCommentList",
			Handler:    _Product_ProductCommentList_Handler,
		},
		{
			MethodName: "IncreaseProductStockOfOrder",
			Handler:    _Product_IncreaseProductStockOfOrder_Handler,
		},
		{
			MethodName: "DecreaseProductStockOfOrder",
			Handler:    _Product_DecreaseProductStockOfOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
