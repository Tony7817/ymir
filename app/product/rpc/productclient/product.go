// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: product.proto

package productclient

import (
	"context"

	"ymir.com/app/product/rpc/product"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ProducrtsInCartListResponse = product.ProducrtsInCartListResponse
	ProductCoverUrlRequest      = product.ProductCoverUrlRequest
	ProductCoverUrlResponse     = product.ProductCoverUrlResponse
	ProductDetailReqeust        = product.ProductDetailReqeust
	ProductDetailResponse       = product.ProductDetailResponse
	ProductImage                = product.ProductImage
	ProductListItem             = product.ProductListItem
	ProductListRequest          = product.ProductListRequest
	ProductListResponse         = product.ProductListResponse
	ProductsInCartListItem      = product.ProductsInCartListItem
	ProductsInCartListRequest   = product.ProductsInCartListRequest

	Product interface {
		ProductList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListResponse, error)
		ProductDetail(ctx context.Context, in *ProductDetailReqeust, opts ...grpc.CallOption) (*ProductDetailResponse, error)
		ProductsInCartList(ctx context.Context, in *ProductsInCartListRequest, opts ...grpc.CallOption) (*ProducrtsInCartListResponse, error)
	}

	defaultProduct struct {
		cli zrpc.Client
	}
)

func NewProduct(cli zrpc.Client) Product {
	return &defaultProduct{
		cli: cli,
	}
}

func (m *defaultProduct) ProductList(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*ProductListResponse, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.ProductList(ctx, in, opts...)
}

func (m *defaultProduct) ProductDetail(ctx context.Context, in *ProductDetailReqeust, opts ...grpc.CallOption) (*ProductDetailResponse, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.ProductDetail(ctx, in, opts...)
}

func (m *defaultProduct) ProductsInCartList(ctx context.Context, in *ProductsInCartListRequest, opts ...grpc.CallOption) (*ProducrtsInCartListResponse, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.ProductsInCartList(ctx, in, opts...)
}
