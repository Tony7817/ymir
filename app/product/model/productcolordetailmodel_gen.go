// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productColorDetailFieldNames          = builder.RawFieldNames(&ProductColorDetail{})
	productColorDetailRows                = strings.Join(productColorDetailFieldNames, ",")
	productColorDetailRowsExpectAutoSet   = strings.Join(stringx.Remove(productColorDetailFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productColorDetailRowsWithPlaceHolder = strings.Join(stringx.Remove(productColorDetailFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirProductColorDetailIdPrefix                 = "cache:ymir:productColorDetail:id:"
	cacheYmirProductColorDetailProductIdIsDefaultPrefix = "cache:ymir:productColorDetail:productId:isDefault:"
)

type (
	productColorDetailModel interface {
		Insert(ctx context.Context, data *ProductColorDetail) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductColorDetail, error)
		FindOneByProductIdIsDefault(ctx context.Context, productId int64, isDefault int64) (*ProductColorDetail, error)
		Update(ctx context.Context, data *ProductColorDetail) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductColorDetailModel struct {
		sqlc.CachedConn
		table string
	}

	ProductColorDetail struct {
		Id            int64         `db:"id"`
		CreatedAt     time.Time     `db:"created_at"`
		UpdatedAt     time.Time     `db:"updated_at"`
		ProductId     int64         `db:"product_id"`
		Color         string        `db:"color"`
		Images        string        `db:"images"`
		DetailImages  string        `db:"detail_images"`
		Price         float64       `db:"price"`
		Unit          string        `db:"unit"`
		SoldNum       sql.NullInt64 `db:"sold_num"`
		AvailableSize string        `db:"available_size"`
		CoverUrl      string        `db:"cover_url"`
		IsDefault     int64         `db:"is_default"`
	}
)

func newProductColorDetailModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProductColorDetailModel {
	return &defaultProductColorDetailModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`product_color_detail`",
	}
}

func (m *defaultProductColorDetailModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ymirProductColorDetailIdKey := fmt.Sprintf("%s%v", cacheYmirProductColorDetailIdPrefix, id)
	ymirProductColorDetailProductIdIsDefaultKey := fmt.Sprintf("%s%v:%v", cacheYmirProductColorDetailProductIdIsDefaultPrefix, data.ProductId, data.IsDefault)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirProductColorDetailIdKey, ymirProductColorDetailProductIdIsDefaultKey)
	return err
}

func (m *defaultProductColorDetailModel) FindOne(ctx context.Context, id int64) (*ProductColorDetail, error) {
	ymirProductColorDetailIdKey := fmt.Sprintf("%s%v", cacheYmirProductColorDetailIdPrefix, id)
	var resp ProductColorDetail
	err := m.QueryRowCtx(ctx, &resp, ymirProductColorDetailIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productColorDetailRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductColorDetailModel) FindOneByProductIdIsDefault(ctx context.Context, productId int64, isDefault int64) (*ProductColorDetail, error) {
	ymirProductColorDetailProductIdIsDefaultKey := fmt.Sprintf("%s%v:%v", cacheYmirProductColorDetailProductIdIsDefaultPrefix, productId, isDefault)
	var resp ProductColorDetail
	err := m.QueryRowIndexCtx(ctx, &resp, ymirProductColorDetailProductIdIsDefaultKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `product_id` = ? and `is_default` = ? limit 1", productColorDetailRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, productId, isDefault); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductColorDetailModel) Insert(ctx context.Context, data *ProductColorDetail) (sql.Result, error) {
	ymirProductColorDetailIdKey := fmt.Sprintf("%s%v", cacheYmirProductColorDetailIdPrefix, data.Id)
	ymirProductColorDetailProductIdIsDefaultKey := fmt.Sprintf("%s%v:%v", cacheYmirProductColorDetailProductIdIsDefaultPrefix, data.ProductId, data.IsDefault)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, productColorDetailRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ProductId, data.Color, data.Images, data.DetailImages, data.Price, data.Unit, data.SoldNum, data.AvailableSize, data.CoverUrl, data.IsDefault)
	}, ymirProductColorDetailIdKey, ymirProductColorDetailProductIdIsDefaultKey)
	return ret, err
}

func (m *defaultProductColorDetailModel) Update(ctx context.Context, newData *ProductColorDetail) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ymirProductColorDetailIdKey := fmt.Sprintf("%s%v", cacheYmirProductColorDetailIdPrefix, data.Id)
	ymirProductColorDetailProductIdIsDefaultKey := fmt.Sprintf("%s%v:%v", cacheYmirProductColorDetailProductIdIsDefaultPrefix, data.ProductId, data.IsDefault)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productColorDetailRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ProductId, newData.Color, newData.Images, newData.DetailImages, newData.Price, newData.Unit, newData.SoldNum, newData.AvailableSize, newData.CoverUrl, newData.IsDefault, newData.Id)
	}, ymirProductColorDetailIdKey, ymirProductColorDetailProductIdIsDefaultKey)
	return err
}

func (m *defaultProductColorDetailModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirProductColorDetailIdPrefix, primary)
}

func (m *defaultProductColorDetailModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productColorDetailRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductColorDetailModel) tableName() string {
	return m.table
}
