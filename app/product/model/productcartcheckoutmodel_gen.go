// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productCartCheckoutFieldNames          = builder.RawFieldNames(&ProductCartCheckout{})
	productCartCheckoutRows                = strings.Join(productCartCheckoutFieldNames, ",")
	productCartCheckoutRowsExpectAutoSet   = strings.Join(stringx.Remove(productCartCheckoutFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productCartCheckoutRowsWithPlaceHolder = strings.Join(stringx.Remove(productCartCheckoutFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirProductCartCheckoutIdPrefix                          = "cache:ymir:productCartCheckout:id:"
	cacheYmirProductCartCheckoutOrderIdColorIdProductIdSizePrefix = "cache:ymir:productCartCheckout:orderId:colorId:productId:size:"
)

type (
	productCartCheckoutModel interface {
		Insert(ctx context.Context, data *ProductCartCheckout) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductCartCheckout, error)
		FindOneByOrderIdColorIdProductIdSize(ctx context.Context, orderId int64, colorId int64, productId int64, size string) (*ProductCartCheckout, error)
		Update(ctx context.Context, data *ProductCartCheckout) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductCartCheckoutModel struct {
		sqlc.CachedConn
		table string
	}

	ProductCartCheckout struct {
		Id              int64     `db:"id"`
		ProductCartId   int64     `db:"product_cart_id"`
		CreatedAt       time.Time `db:"created_at"`
		OriginCreatedAt time.Time `db:"origin_created_at"`
		UpdatedAt       time.Time `db:"updated_at"`
		OrderId         int64     `db:"order_id"`
		ProductId       int64     `db:"product_id"`
		UserId          int64     `db:"user_id"`
		ColorId         int64     `db:"color_id"`
		Amount          int64     `db:"amount"`
		Size            string    `db:"size"`
	}
)

func newProductCartCheckoutModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProductCartCheckoutModel {
	return &defaultProductCartCheckoutModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`product_cart_checkout`",
	}
}

func (m *defaultProductCartCheckoutModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ymirProductCartCheckoutIdKey := fmt.Sprintf("%s%v", cacheYmirProductCartCheckoutIdPrefix, id)
	ymirProductCartCheckoutOrderIdColorIdProductIdSizeKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheYmirProductCartCheckoutOrderIdColorIdProductIdSizePrefix, data.OrderId, data.ColorId, data.ProductId, data.Size)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirProductCartCheckoutIdKey, ymirProductCartCheckoutOrderIdColorIdProductIdSizeKey)
	return err
}

func (m *defaultProductCartCheckoutModel) FindOne(ctx context.Context, id int64) (*ProductCartCheckout, error) {
	ymirProductCartCheckoutIdKey := fmt.Sprintf("%s%v", cacheYmirProductCartCheckoutIdPrefix, id)
	var resp ProductCartCheckout
	err := m.QueryRowCtx(ctx, &resp, ymirProductCartCheckoutIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productCartCheckoutRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductCartCheckoutModel) FindOneByOrderIdColorIdProductIdSize(ctx context.Context, orderId int64, colorId int64, productId int64, size string) (*ProductCartCheckout, error) {
	ymirProductCartCheckoutOrderIdColorIdProductIdSizeKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheYmirProductCartCheckoutOrderIdColorIdProductIdSizePrefix, orderId, colorId, productId, size)
	var resp ProductCartCheckout
	err := m.QueryRowIndexCtx(ctx, &resp, ymirProductCartCheckoutOrderIdColorIdProductIdSizeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `order_id` = ? and `color_id` = ? and `product_id` = ? and `size` = ? limit 1", productCartCheckoutRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, orderId, colorId, productId, size); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductCartCheckoutModel) Insert(ctx context.Context, data *ProductCartCheckout) (sql.Result, error) {
	ymirProductCartCheckoutIdKey := fmt.Sprintf("%s%v", cacheYmirProductCartCheckoutIdPrefix, data.Id)
	ymirProductCartCheckoutOrderIdColorIdProductIdSizeKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheYmirProductCartCheckoutOrderIdColorIdProductIdSizePrefix, data.OrderId, data.ColorId, data.ProductId, data.Size)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, productCartCheckoutRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ProductCartId, data.OriginCreatedAt, data.OrderId, data.ProductId, data.UserId, data.ColorId, data.Amount, data.Size)
	}, ymirProductCartCheckoutIdKey, ymirProductCartCheckoutOrderIdColorIdProductIdSizeKey)
	return ret, err
}

func (m *defaultProductCartCheckoutModel) Update(ctx context.Context, newData *ProductCartCheckout) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ymirProductCartCheckoutIdKey := fmt.Sprintf("%s%v", cacheYmirProductCartCheckoutIdPrefix, data.Id)
	ymirProductCartCheckoutOrderIdColorIdProductIdSizeKey := fmt.Sprintf("%s%v:%v:%v:%v", cacheYmirProductCartCheckoutOrderIdColorIdProductIdSizePrefix, data.OrderId, data.ColorId, data.ProductId, data.Size)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productCartCheckoutRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ProductCartId, newData.OriginCreatedAt, newData.OrderId, newData.ProductId, newData.UserId, newData.ColorId, newData.Amount, newData.Size, newData.Id)
	}, ymirProductCartCheckoutIdKey, ymirProductCartCheckoutOrderIdColorIdProductIdSizeKey)
	return err
}

func (m *defaultProductCartCheckoutModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirProductCartCheckoutIdPrefix, primary)
}

func (m *defaultProductCartCheckoutModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productCartCheckoutRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductCartCheckoutModel) tableName() string {
	return m.table
}
