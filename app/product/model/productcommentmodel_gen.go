// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productCommentFieldNames          = builder.RawFieldNames(&ProductComment{})
	productCommentRows                = strings.Join(productCommentFieldNames, ",")
	productCommentRowsExpectAutoSet   = strings.Join(stringx.Remove(productCommentFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productCommentRowsWithPlaceHolder = strings.Join(stringx.Remove(productCommentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirProductCommentIdPrefix = "cache:ymir:productComment:id:"
)

type (
	productCommentModel interface {
		Insert(ctx context.Context, data *ProductComment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductComment, error)
		Update(ctx context.Context, data *ProductComment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductCommentModel struct {
		sqlc.CachedConn
		table string
	}

	ProductComment struct {
		Id        int64     `db:"id"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
		UserId    int64     `db:"user_id"`
		ProductId int64     `db:"product_id"`
		Comment   string    `db:"comment"`
		LikeNum   int64     `db:"like_num"`
		UnLikeNum int64     `db:"un_like_num"`
		Rate      float64   `db:"rate"`
		IsDeleted int64     `db:"is_deleted"`
		Size      string    `db:"size"`
		Color     string    `db:"color"`
	}
)

func newProductCommentModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultProductCommentModel {
	return &defaultProductCommentModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`product_comment`",
	}
}

func (m *defaultProductCommentModel) Delete(ctx context.Context, id int64) error {
	ymirProductCommentIdKey := fmt.Sprintf("%s%v", cacheYmirProductCommentIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirProductCommentIdKey)
	return err
}

func (m *defaultProductCommentModel) FindOne(ctx context.Context, id int64) (*ProductComment, error) {
	ymirProductCommentIdKey := fmt.Sprintf("%s%v", cacheYmirProductCommentIdPrefix, id)
	var resp ProductComment
	err := m.QueryRowCtx(ctx, &resp, ymirProductCommentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productCommentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductCommentModel) Insert(ctx context.Context, data *ProductComment) (sql.Result, error) {
	ymirProductCommentIdKey := fmt.Sprintf("%s%v", cacheYmirProductCommentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, productCommentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.ProductId, data.Comment, data.LikeNum, data.UnLikeNum, data.Rate, data.IsDeleted, data.Size, data.Color)
	}, ymirProductCommentIdKey)
	return ret, err
}

func (m *defaultProductCommentModel) Update(ctx context.Context, data *ProductComment) error {
	ymirProductCommentIdKey := fmt.Sprintf("%s%v", cacheYmirProductCommentIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productCommentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.ProductId, data.Comment, data.LikeNum, data.UnLikeNum, data.Rate, data.IsDeleted, data.Size, data.Color, data.Id)
	}, ymirProductCommentIdKey)
	return err
}

func (m *defaultProductCommentModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirProductCommentIdPrefix, primary)
}

func (m *defaultProductCommentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productCommentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductCommentModel) tableName() string {
	return m.table
}
