// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: user.proto

package userclient

import (
	"context"

	"ymir.com/app/user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteCaptchaRequest                 = user.DeleteCaptchaRequest
	DeleteCaptchaResponse                = user.DeleteCaptchaResponse
	GetCaptchaByEmailRequest             = user.GetCaptchaByEmailRequest
	GetCaptchaByPhonenumberRequest       = user.GetCaptchaByPhonenumberRequest
	GetCaptchaResponse                   = user.GetCaptchaResponse
	GetUserRequest                       = user.GetUserRequest
	GetUserResponse                      = user.GetUserResponse
	SendCaptchaToEmailRequest            = user.SendCaptchaToEmailRequest
	SendCaptchaToEmailResponse           = user.SendCaptchaToEmailResponse
	SendCaptchaToPhonenumberRequest      = user.SendCaptchaToPhonenumberRequest
	SendCaptchaToPhonenumberResponse     = user.SendCaptchaToPhonenumberResponse
	UserInfo                             = user.UserInfo
	WriteUserInDBWithEmailRequest        = user.WriteUserInDBWithEmailRequest
	WriteUserInDBWithEmailResponse       = user.WriteUserInDBWithEmailResponse
	WriteUserInDBWithPhonenumberRequest  = user.WriteUserInDBWithPhonenumberRequest
	WriteUserInDBWithPhonenumberResponse = user.WriteUserInDBWithPhonenumberResponse

	User interface {
		GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
		SendCaptchaToEmail(ctx context.Context, in *SendCaptchaToEmailRequest, opts ...grpc.CallOption) (*SendCaptchaToEmailResponse, error)
		GetCaptchaByEmail(ctx context.Context, in *GetCaptchaByEmailRequest, opts ...grpc.CallOption) (*GetCaptchaResponse, error)
		GetCaptchaByPhonenumber(ctx context.Context, in *GetCaptchaByPhonenumberRequest, opts ...grpc.CallOption) (*GetCaptchaResponse, error)
		DeleteCaptcha(ctx context.Context, in *DeleteCaptchaRequest, opts ...grpc.CallOption) (*DeleteCaptchaResponse, error)
		WriteUserInDBWithEmail(ctx context.Context, in *WriteUserInDBWithEmailRequest, opts ...grpc.CallOption) (*WriteUserInDBWithEmailResponse, error)
		WriteUserInDBWithPhonenumber(ctx context.Context, in *WriteUserInDBWithPhonenumberRequest, opts ...grpc.CallOption) (*WriteUserInDBWithPhonenumberResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUser) SendCaptchaToEmail(ctx context.Context, in *SendCaptchaToEmailRequest, opts ...grpc.CallOption) (*SendCaptchaToEmailResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SendCaptchaToEmail(ctx, in, opts...)
}

func (m *defaultUser) GetCaptchaByEmail(ctx context.Context, in *GetCaptchaByEmailRequest, opts ...grpc.CallOption) (*GetCaptchaResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetCaptchaByEmail(ctx, in, opts...)
}

func (m *defaultUser) GetCaptchaByPhonenumber(ctx context.Context, in *GetCaptchaByPhonenumberRequest, opts ...grpc.CallOption) (*GetCaptchaResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetCaptchaByPhonenumber(ctx, in, opts...)
}

func (m *defaultUser) DeleteCaptcha(ctx context.Context, in *DeleteCaptchaRequest, opts ...grpc.CallOption) (*DeleteCaptchaResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.DeleteCaptcha(ctx, in, opts...)
}

func (m *defaultUser) WriteUserInDBWithEmail(ctx context.Context, in *WriteUserInDBWithEmailRequest, opts ...grpc.CallOption) (*WriteUserInDBWithEmailResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.WriteUserInDBWithEmail(ctx, in, opts...)
}

func (m *defaultUser) WriteUserInDBWithPhonenumber(ctx context.Context, in *WriteUserInDBWithPhonenumberRequest, opts ...grpc.CallOption) (*WriteUserInDBWithPhonenumberResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.WriteUserInDBWithPhonenumber(ctx, in, opts...)
}
