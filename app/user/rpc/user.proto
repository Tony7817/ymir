syntax = "proto3";

package user;
option go_package="./user";

message GetUserInfoRequest {
  optional string Email = 1;
  optional string Phonenumber = 2;
  optional int64 UserId = 3;
}

message UserInfo {
  int64 Id = 1;
  string Username = 2;
  string AvatarUrl = 3;
  string Email = 4;
  string Phonenumber = 5;
  string Type = 6;
}

message GetUserInfoResponse {
  optional UserInfo user = 1;
}

message GetUserLocalRequest {
    int64 UserId = 4;
}

message UserLocalInfo {
  int64 Id = 1;
  int64 UserId = 2;
  string PasswordHash = 3;
  bool isActivated = 4;
}

message GetUserLocalResponse {
  optional UserLocalInfo user = 1;
}

message GetUserGoogleRequest {
  string GoogleUserId = 2;
}

message UserGoogleInfo {
  int64 Id = 1;
  int64 UserId = 2;
  string GoogleUserId = 3;
}

message GetUserGoogleResponse {
  optional UserGoogleInfo user = 1;
}

message WriteUserLocalRequest {
  optional string Email = 1;
  optional string Phonenumber = 2;
  string PasswordHash = 3;
  string UserName = 4;
  optional string AvatarUrl = 5;
  int64 UserId = 6;

  // avatar is not avaliable for now
  // string AvatarUrl = 3; 
}

message WriteUserLocalResponse {
  int64 UserId = 1;
}


message WriteUserGoogleRequest {
  int64 UserId = 1;
  string UserGoogleId = 2;
  string Email = 3;
  string AvatarUrl = 4;
  string UserName = 5;
}

message WriteUserGoogleResponse {
  int64 UserId = 1;
}

message SendCaptchaToEmailRequest {
  int64 CaptchaId = 1;
  string Email = 2;
}

message SendCaptchaToEmailResponse {
  int64 CreatedAt = 1;
}

message SendCaptchaToPhonenumberRequest {
  int64 CaptchaId = 1;
  string Phonenumber = 2;
}

message SendCaptchaToPhonenumberResponse {
  int64 CreatedAt = 1;
}

message GetCaptchaByEmailRequest {
  string Email = 1;
}

message GetCaptchaByPhonenumberRequest {
  string Phonenumber = 1;
}

message GetCaptchaResponse {
  int64 Id = 1;
  string Captcha = 2;
  int64 CreatedAt = 3;
}

message DeleteCaptchaRequest {
  int64 Id = 1;
  string cacheKey = 2;
}

message DeleteCaptchaResponse {
}

message GetOssStsTokenRequest {
  int64 UserId = 1;
}

message GetOssStsTokenResponse {
  string AccessKeyId = 1;
  string AccessKeySecret = 2;
  string Expiration = 3;
  string SecurityToken  = 4;
}

service user {
  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);
  rpc GetUserLocal(GetUserLocalRequest) returns (GetUserLocalResponse);
  rpc GetUserGoogle(GetUserGoogleRequest) returns (GetUserGoogleResponse);
  rpc SendCaptchaToEmail(SendCaptchaToEmailRequest) returns (SendCaptchaToEmailResponse);
  rpc SendCaptchaToPhonenumber(SendCaptchaToPhonenumberRequest) returns (SendCaptchaToPhonenumberResponse);
  rpc GetCaptchaByEmail(GetCaptchaByEmailRequest) returns (GetCaptchaResponse);
  rpc GetCaptchaByPhonenumber(GetCaptchaByPhonenumberRequest) returns (GetCaptchaResponse);
  rpc DeleteCaptcha(DeleteCaptchaRequest) returns (DeleteCaptchaResponse);
  rpc WriteUserLocalInDB(WriteUserLocalRequest) returns (WriteUserLocalResponse);
  rpc WriteUserGoogleInDB(WriteUserGoogleRequest) returns (WriteUserGoogleResponse);
  rpc GetOssStsToken(GetOssStsTokenRequest) returns (GetOssStsTokenResponse);
}
