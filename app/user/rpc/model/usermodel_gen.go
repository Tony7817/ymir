// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirUserIdPrefix          = "cache:ymir:user:id:"
	cacheYmirUserEmailPrefix       = "cache:ymir:user:email:"
	cacheYmirUserPhoneNumberPrefix = "cache:ymir:user:phoneNumber:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByEmail(ctx context.Context, email sql.NullString) (*User, error)
		FindOneByPhoneNumber(ctx context.Context, phoneNumber sql.NullString) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id          int64          `db:"id"`
		CreatedAt   time.Time      `db:"created_at"`
		UpdatedAt   time.Time      `db:"updated_at"`
		Username    string         `db:"username"`
		Email       sql.NullString `db:"email"`
		PhoneNumber sql.NullString `db:"phone_number"`
		AvatarUrl   sql.NullString `db:"avatar_url"`
		Type        string         `db:"type"`
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ymirUserEmailKey := fmt.Sprintf("%s%v", cacheYmirUserEmailPrefix, data.Email)
	ymirUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserIdPrefix, id)
	ymirUserPhoneNumberKey := fmt.Sprintf("%s%v", cacheYmirUserPhoneNumberPrefix, data.PhoneNumber)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirUserEmailKey, ymirUserIdKey, ymirUserPhoneNumberKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	ymirUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, ymirUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByEmail(ctx context.Context, email sql.NullString) (*User, error) {
	ymirUserEmailKey := fmt.Sprintf("%s%v", cacheYmirUserEmailPrefix, email)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, ymirUserEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByPhoneNumber(ctx context.Context, phoneNumber sql.NullString) (*User, error) {
	ymirUserPhoneNumberKey := fmt.Sprintf("%s%v", cacheYmirUserPhoneNumberPrefix, phoneNumber)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, ymirUserPhoneNumberKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `phone_number` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phoneNumber); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	ymirUserEmailKey := fmt.Sprintf("%s%v", cacheYmirUserEmailPrefix, data.Email)
	ymirUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserIdPrefix, data.Id)
	ymirUserPhoneNumberKey := fmt.Sprintf("%s%v", cacheYmirUserPhoneNumberPrefix, data.PhoneNumber)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Email, data.PhoneNumber, data.AvatarUrl, data.Type)
	}, ymirUserEmailKey, ymirUserIdKey, ymirUserPhoneNumberKey)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ymirUserEmailKey := fmt.Sprintf("%s%v", cacheYmirUserEmailPrefix, data.Email)
	ymirUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserIdPrefix, data.Id)
	ymirUserPhoneNumberKey := fmt.Sprintf("%s%v", cacheYmirUserPhoneNumberPrefix, data.PhoneNumber)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Email, newData.PhoneNumber, newData.AvatarUrl, newData.Type, newData.Id)
	}, ymirUserEmailKey, ymirUserIdKey, ymirUserPhoneNumberKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
