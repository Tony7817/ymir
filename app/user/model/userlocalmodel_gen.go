// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userLocalFieldNames          = builder.RawFieldNames(&UserLocal{})
	userLocalRows                = strings.Join(userLocalFieldNames, ",")
	userLocalRowsExpectAutoSet   = strings.Join(stringx.Remove(userLocalFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userLocalRowsWithPlaceHolder = strings.Join(stringx.Remove(userLocalFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirUserLocalIdPrefix     = "cache:ymir:userLocal:id:"
	cacheYmirUserLocalUserIdPrefix = "cache:ymir:userLocal:userId:"
)

type (
	userLocalModel interface {
		Insert(ctx context.Context, data *UserLocal) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserLocal, error)
		FindOneByUserId(ctx context.Context, userId int64) (*UserLocal, error)
		Update(ctx context.Context, data *UserLocal) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserLocalModel struct {
		sqlc.CachedConn
		table string
	}

	UserLocal struct {
		Id           int64  `db:"id"`
		UserId       int64  `db:"user_id"`
		PasswordHash string `db:"password_hash"`
		IsActivated  int64  `db:"is_activated"`
	}
)

func newUserLocalModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserLocalModel {
	return &defaultUserLocalModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_local`",
	}
}

func (m *defaultUserLocalModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ymirUserLocalIdKey := fmt.Sprintf("%s%v", cacheYmirUserLocalIdPrefix, id)
	ymirUserLocalUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserLocalUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirUserLocalIdKey, ymirUserLocalUserIdKey)
	return err
}

func (m *defaultUserLocalModel) FindOne(ctx context.Context, id int64) (*UserLocal, error) {
	ymirUserLocalIdKey := fmt.Sprintf("%s%v", cacheYmirUserLocalIdPrefix, id)
	var resp UserLocal
	err := m.QueryRowCtx(ctx, &resp, ymirUserLocalIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLocalRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLocalModel) FindOneByUserId(ctx context.Context, userId int64) (*UserLocal, error) {
	ymirUserLocalUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserLocalUserIdPrefix, userId)
	var resp UserLocal
	err := m.QueryRowIndexCtx(ctx, &resp, ymirUserLocalUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userLocalRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLocalModel) Insert(ctx context.Context, data *UserLocal) (sql.Result, error) {
	ymirUserLocalIdKey := fmt.Sprintf("%s%v", cacheYmirUserLocalIdPrefix, data.Id)
	ymirUserLocalUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserLocalUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userLocalRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.PasswordHash, data.IsActivated)
	}, ymirUserLocalIdKey, ymirUserLocalUserIdKey)
	return ret, err
}

func (m *defaultUserLocalModel) Update(ctx context.Context, newData *UserLocal) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ymirUserLocalIdKey := fmt.Sprintf("%s%v", cacheYmirUserLocalIdPrefix, data.Id)
	ymirUserLocalUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserLocalUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userLocalRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.PasswordHash, newData.IsActivated, newData.Id)
	}, ymirUserLocalIdKey, ymirUserLocalUserIdKey)
	return err
}

func (m *defaultUserLocalModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirUserLocalIdPrefix, primary)
}

func (m *defaultUserLocalModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLocalRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserLocalModel) tableName() string {
	return m.table
}
