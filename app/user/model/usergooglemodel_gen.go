// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userGoogleFieldNames          = builder.RawFieldNames(&UserGoogle{})
	userGoogleRows                = strings.Join(userGoogleFieldNames, ",")
	userGoogleRowsExpectAutoSet   = strings.Join(stringx.Remove(userGoogleFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userGoogleRowsWithPlaceHolder = strings.Join(stringx.Remove(userGoogleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirUserGoogleIdPrefix           = "cache:ymir:userGoogle:id:"
	cacheYmirUserGoogleGoogleUserIdPrefix = "cache:ymir:userGoogle:googleUserId:"
	cacheYmirUserGoogleUserIdPrefix       = "cache:ymir:userGoogle:userId:"
)

type (
	userGoogleModel interface {
		Insert(ctx context.Context, data *UserGoogle) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserGoogle, error)
		FindOneByGoogleUserId(ctx context.Context, googleUserId string) (*UserGoogle, error)
		FindOneByUserId(ctx context.Context, userId int64) (*UserGoogle, error)
		Update(ctx context.Context, data *UserGoogle) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserGoogleModel struct {
		sqlc.CachedConn
		table string
	}

	UserGoogle struct {
		Id           int64  `db:"id"`
		UserId       int64  `db:"user_id"`
		GoogleUserId string `db:"google_user_id"`
	}
)

func newUserGoogleModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserGoogleModel {
	return &defaultUserGoogleModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_google`",
	}
}

func (m *defaultUserGoogleModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ymirUserGoogleGoogleUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserGoogleGoogleUserIdPrefix, data.GoogleUserId)
	ymirUserGoogleIdKey := fmt.Sprintf("%s%v", cacheYmirUserGoogleIdPrefix, id)
	ymirUserGoogleUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserGoogleUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirUserGoogleGoogleUserIdKey, ymirUserGoogleIdKey, ymirUserGoogleUserIdKey)
	return err
}

func (m *defaultUserGoogleModel) FindOne(ctx context.Context, id int64) (*UserGoogle, error) {
	ymirUserGoogleIdKey := fmt.Sprintf("%s%v", cacheYmirUserGoogleIdPrefix, id)
	var resp UserGoogle
	err := m.QueryRowCtx(ctx, &resp, ymirUserGoogleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userGoogleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserGoogleModel) FindOneByGoogleUserId(ctx context.Context, googleUserId string) (*UserGoogle, error) {
	ymirUserGoogleGoogleUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserGoogleGoogleUserIdPrefix, googleUserId)
	var resp UserGoogle
	err := m.QueryRowIndexCtx(ctx, &resp, ymirUserGoogleGoogleUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `google_user_id` = ? limit 1", userGoogleRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, googleUserId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserGoogleModel) FindOneByUserId(ctx context.Context, userId int64) (*UserGoogle, error) {
	ymirUserGoogleUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserGoogleUserIdPrefix, userId)
	var resp UserGoogle
	err := m.QueryRowIndexCtx(ctx, &resp, ymirUserGoogleUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", userGoogleRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserGoogleModel) Insert(ctx context.Context, data *UserGoogle) (sql.Result, error) {
	ymirUserGoogleGoogleUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserGoogleGoogleUserIdPrefix, data.GoogleUserId)
	ymirUserGoogleIdKey := fmt.Sprintf("%s%v", cacheYmirUserGoogleIdPrefix, data.Id)
	ymirUserGoogleUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserGoogleUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userGoogleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.GoogleUserId)
	}, ymirUserGoogleGoogleUserIdKey, ymirUserGoogleIdKey, ymirUserGoogleUserIdKey)
	return ret, err
}

func (m *defaultUserGoogleModel) Update(ctx context.Context, newData *UserGoogle) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ymirUserGoogleGoogleUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserGoogleGoogleUserIdPrefix, data.GoogleUserId)
	ymirUserGoogleIdKey := fmt.Sprintf("%s%v", cacheYmirUserGoogleIdPrefix, data.Id)
	ymirUserGoogleUserIdKey := fmt.Sprintf("%s%v", cacheYmirUserGoogleUserIdPrefix, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userGoogleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.GoogleUserId, newData.Id)
	}, ymirUserGoogleGoogleUserIdKey, ymirUserGoogleIdKey, ymirUserGoogleUserIdKey)
	return err
}

func (m *defaultUserGoogleModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirUserGoogleIdPrefix, primary)
}

func (m *defaultUserGoogleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userGoogleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserGoogleModel) tableName() string {
	return m.table
}
