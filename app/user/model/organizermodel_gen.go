// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	organizerFieldNames          = builder.RawFieldNames(&Organizer{})
	organizerRows                = strings.Join(organizerFieldNames, ",")
	organizerRowsExpectAutoSet   = strings.Join(stringx.Remove(organizerFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	organizerRowsWithPlaceHolder = strings.Join(stringx.Remove(organizerFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirOrganizerIdPrefix          = "cache:ymir:organizer:id:"
	cacheYmirOrganizerPhoneNumberPrefix = "cache:ymir:organizer:phoneNumber:"
)

type (
	organizerModel interface {
		Insert(ctx context.Context, data *Organizer) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Organizer, error)
		FindOneByPhoneNumber(ctx context.Context, phoneNumber sql.NullString) (*Organizer, error)
		Update(ctx context.Context, data *Organizer) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrganizerModel struct {
		sqlc.CachedConn
		table string
	}

	Organizer struct {
		Id          int64          `db:"id"`
		CreatedAt   time.Time      `db:"created_at"`
		UpdatedAt   time.Time      `db:"updated_at"`
		PhoneNumber sql.NullString `db:"phone_number"`
		Role        int64          `db:"role"`
	}
)

func newOrganizerModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrganizerModel {
	return &defaultOrganizerModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`organizer`",
	}
}

func (m *defaultOrganizerModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ymirOrganizerIdKey := fmt.Sprintf("%s%v", cacheYmirOrganizerIdPrefix, id)
	ymirOrganizerPhoneNumberKey := fmt.Sprintf("%s%v", cacheYmirOrganizerPhoneNumberPrefix, data.PhoneNumber)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirOrganizerIdKey, ymirOrganizerPhoneNumberKey)
	return err
}

func (m *defaultOrganizerModel) FindOne(ctx context.Context, id int64) (*Organizer, error) {
	ymirOrganizerIdKey := fmt.Sprintf("%s%v", cacheYmirOrganizerIdPrefix, id)
	var resp Organizer
	err := m.QueryRowCtx(ctx, &resp, ymirOrganizerIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", organizerRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrganizerModel) FindOneByPhoneNumber(ctx context.Context, phoneNumber sql.NullString) (*Organizer, error) {
	ymirOrganizerPhoneNumberKey := fmt.Sprintf("%s%v", cacheYmirOrganizerPhoneNumberPrefix, phoneNumber)
	var resp Organizer
	err := m.QueryRowIndexCtx(ctx, &resp, ymirOrganizerPhoneNumberKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `phone_number` = ? limit 1", organizerRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, phoneNumber); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrganizerModel) Insert(ctx context.Context, data *Organizer) (sql.Result, error) {
	ymirOrganizerIdKey := fmt.Sprintf("%s%v", cacheYmirOrganizerIdPrefix, data.Id)
	ymirOrganizerPhoneNumberKey := fmt.Sprintf("%s%v", cacheYmirOrganizerPhoneNumberPrefix, data.PhoneNumber)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, organizerRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.PhoneNumber, data.Role)
	}, ymirOrganizerIdKey, ymirOrganizerPhoneNumberKey)
	return ret, err
}

func (m *defaultOrganizerModel) Update(ctx context.Context, newData *Organizer) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ymirOrganizerIdKey := fmt.Sprintf("%s%v", cacheYmirOrganizerIdPrefix, data.Id)
	ymirOrganizerPhoneNumberKey := fmt.Sprintf("%s%v", cacheYmirOrganizerPhoneNumberPrefix, data.PhoneNumber)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, organizerRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.PhoneNumber, newData.Role, newData.Id)
	}, ymirOrganizerIdKey, ymirOrganizerPhoneNumberKey)
	return err
}

func (m *defaultOrganizerModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirOrganizerIdPrefix, primary)
}

func (m *defaultOrganizerModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", organizerRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrganizerModel) tableName() string {
	return m.table
}
