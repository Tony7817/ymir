// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: staradmin.proto

package star

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Star_StarList_FullMethodName   = "/admin.Star/StarList"
	Star_StarDetail_FullMethodName = "/admin.Star/StarDetail"
	Star_UpdateStar_FullMethodName = "/admin.Star/UpdateStar"
	Star_CreateStar_FullMethodName = "/admin.Star/CreateStar"
)

// StarClient is the client API for Star service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StarClient interface {
	StarList(ctx context.Context, in *StarListRequest, opts ...grpc.CallOption) (*StarListResponse, error)
	StarDetail(ctx context.Context, in *StarDetailRequest, opts ...grpc.CallOption) (*StarDetailResponse, error)
	UpdateStar(ctx context.Context, in *UpdateStarReqeust, opts ...grpc.CallOption) (*UpdateStarResponse, error)
	CreateStar(ctx context.Context, in *CreateStarRequest, opts ...grpc.CallOption) (*CreateStarResponse, error)
}

type starClient struct {
	cc grpc.ClientConnInterface
}

func NewStarClient(cc grpc.ClientConnInterface) StarClient {
	return &starClient{cc}
}

func (c *starClient) StarList(ctx context.Context, in *StarListRequest, opts ...grpc.CallOption) (*StarListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StarListResponse)
	err := c.cc.Invoke(ctx, Star_StarList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starClient) StarDetail(ctx context.Context, in *StarDetailRequest, opts ...grpc.CallOption) (*StarDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StarDetailResponse)
	err := c.cc.Invoke(ctx, Star_StarDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starClient) UpdateStar(ctx context.Context, in *UpdateStarReqeust, opts ...grpc.CallOption) (*UpdateStarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStarResponse)
	err := c.cc.Invoke(ctx, Star_UpdateStar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starClient) CreateStar(ctx context.Context, in *CreateStarRequest, opts ...grpc.CallOption) (*CreateStarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStarResponse)
	err := c.cc.Invoke(ctx, Star_CreateStar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StarServer is the server API for Star service.
// All implementations must embed UnimplementedStarServer
// for forward compatibility.
type StarServer interface {
	StarList(context.Context, *StarListRequest) (*StarListResponse, error)
	StarDetail(context.Context, *StarDetailRequest) (*StarDetailResponse, error)
	UpdateStar(context.Context, *UpdateStarReqeust) (*UpdateStarResponse, error)
	CreateStar(context.Context, *CreateStarRequest) (*CreateStarResponse, error)
	mustEmbedUnimplementedStarServer()
}

// UnimplementedStarServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStarServer struct{}

func (UnimplementedStarServer) StarList(context.Context, *StarListRequest) (*StarListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StarList not implemented")
}
func (UnimplementedStarServer) StarDetail(context.Context, *StarDetailRequest) (*StarDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StarDetail not implemented")
}
func (UnimplementedStarServer) UpdateStar(context.Context, *UpdateStarReqeust) (*UpdateStarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStar not implemented")
}
func (UnimplementedStarServer) CreateStar(context.Context, *CreateStarRequest) (*CreateStarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStar not implemented")
}
func (UnimplementedStarServer) mustEmbedUnimplementedStarServer() {}
func (UnimplementedStarServer) testEmbeddedByValue()              {}

// UnsafeStarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StarServer will
// result in compilation errors.
type UnsafeStarServer interface {
	mustEmbedUnimplementedStarServer()
}

func RegisterStarServer(s grpc.ServiceRegistrar, srv StarServer) {
	// If the following call pancis, it indicates UnimplementedStarServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Star_ServiceDesc, srv)
}

func _Star_StarList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StarListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarServer).StarList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Star_StarList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarServer).StarList(ctx, req.(*StarListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Star_StarDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StarDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarServer).StarDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Star_StarDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarServer).StarDetail(ctx, req.(*StarDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Star_UpdateStar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStarReqeust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarServer).UpdateStar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Star_UpdateStar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarServer).UpdateStar(ctx, req.(*UpdateStarReqeust))
	}
	return interceptor(ctx, in, info, handler)
}

func _Star_CreateStar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarServer).CreateStar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Star_CreateStar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarServer).CreateStar(ctx, req.(*CreateStarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Star_ServiceDesc is the grpc.ServiceDesc for Star service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Star_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Star",
	HandlerType: (*StarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StarList",
			Handler:    _Star_StarList_Handler,
		},
		{
			MethodName: "StarDetail",
			Handler:    _Star_StarDetail_Handler,
		},
		{
			MethodName: "UpdateStar",
			Handler:    _Star_UpdateStar_Handler,
		},
		{
			MethodName: "CreateStar",
			Handler:    _Star_CreateStar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "staradmin.proto",
}
