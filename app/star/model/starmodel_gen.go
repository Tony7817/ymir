// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	starFieldNames          = builder.RawFieldNames(&Star{})
	starRows                = strings.Join(starFieldNames, ",")
	starRowsExpectAutoSet   = strings.Join(stringx.Remove(starFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	starRowsWithPlaceHolder = strings.Join(stringx.Remove(starFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirStarIdPrefix = "cache:ymir:star:id:"
)

type (
	starModel interface {
		Insert(ctx context.Context, data *Star) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Star, error)
		Update(ctx context.Context, data *Star) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStarModel struct {
		sqlc.CachedConn
		table string
	}

	Star struct {
		Id          int64           `db:"id"`
		CreatedAt   time.Time       `db:"created_at"`
		UpdatedAt   time.Time       `db:"updated_at"`
		Name        string          `db:"name"`
		Rate        sql.NullFloat64 `db:"rate"`
		RateCount   int64           `db:"rate_count"`
		AvatarUrl   string          `db:"avatar_url"`
		Description sql.NullString  `db:"description"`
		CoverUrl    string          `db:"cover_url"`
		PosterUrl   string          `db:"poster_url"`
	}
)

func newStarModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultStarModel {
	return &defaultStarModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`star`",
	}
}

func (m *defaultStarModel) Delete(ctx context.Context, id int64) error {
	ymirStarIdKey := fmt.Sprintf("%s%v", cacheYmirStarIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirStarIdKey)
	return err
}

func (m *defaultStarModel) FindOne(ctx context.Context, id int64) (*Star, error) {
	ymirStarIdKey := fmt.Sprintf("%s%v", cacheYmirStarIdPrefix, id)
	var resp Star
	err := m.QueryRowCtx(ctx, &resp, ymirStarIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", starRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStarModel) Insert(ctx context.Context, data *Star) (sql.Result, error) {
	ymirStarIdKey := fmt.Sprintf("%s%v", cacheYmirStarIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, starRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.Rate, data.RateCount, data.AvatarUrl, data.Description, data.CoverUrl, data.PosterUrl)
	}, ymirStarIdKey)
	return ret, err
}

func (m *defaultStarModel) Update(ctx context.Context, data *Star) error {
	ymirStarIdKey := fmt.Sprintf("%s%v", cacheYmirStarIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, starRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Rate, data.RateCount, data.AvatarUrl, data.Description, data.CoverUrl, data.PosterUrl, data.Id)
	}, ymirStarIdKey)
	return err
}

func (m *defaultStarModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirStarIdPrefix, primary)
}

func (m *defaultStarModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", starRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStarModel) tableName() string {
	return m.table
}
