// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3

package handler

import (
	"net/http"

	order "ymir.com/app/bffd/internal/handler/order"
	product "ymir.com/app/bffd/internal/handler/product"
	recommend "ymir.com/app/bffd/internal/handler/recommend"
	star "ymir.com/app/bffd/internal/handler/star"
	user "ymir.com/app/bffd/internal/handler/user"
	"ymir.com/app/bffd/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/order/:orderId",
				Handler: order.OrderDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/address/:orderId",
				Handler: order.OrderAddressHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/create",
				Handler: order.CreateOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/delete",
				Handler: order.DeleteOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/list",
				Handler: order.OrderListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/pay",
				Handler: order.PayOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/paypal/capture",
				Handler: order.CapturePaypalOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/order/paypal/create",
				Handler: order.CreatePaypalOrderHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/product/:productId",
				Handler: product.ProductDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/product/comment/list",
				Handler: product.ProductCommentListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/product/list",
				Handler: product.ProductListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/cart/add/product",
				Handler: product.AddProductToCartHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cart/decrease/amount",
				Handler: product.DecreaseProductAmountInCartHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cart/increase/amount",
				Handler: product.AddProductAmountInCartHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cart/list",
				Handler: product.CartListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/cart/remove",
				Handler: product.RemoveProductFromCartHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/recommend/star/list",
				Handler: recommend.RecommendStarListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/star/:id",
				Handler: star.StarDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/star/list",
				Handler: star.StarListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/check",
				Handler: user.CheckIfUserSignedUpHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/forgetpass/reset",
				Handler: user.ForgetPasswordResetHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/ip",
				Handler: user.GetIpAddressHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/signin",
				Handler: user.SigninHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/signin/google",
				Handler: user.SigninWithGoogleHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/signup",
				Handler: user.SignupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/verify/captcha",
				Handler: user.VerifyCaptchaHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Timer},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/user/forgetpassword/captcha",
					Handler: user.SendForgetPasswordCaptchaHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/user/signup/captcha",
					Handler: user.SendSignupCaptchaHandler(serverCtx),
				},
			}...,
		),
		rest.WithSignature(serverCtx.Config.Signature),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/file/token",
				Handler: user.GetOssSTSTokenHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/detail",
				Handler: user.UserDetailHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api"),
	)
}
