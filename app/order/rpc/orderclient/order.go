// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: order.proto

package orderclient

import (
	"context"

	"ymir.com/app/order/rpc/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateOrderRequest      = order.CreateOrderRequest
	CreateOrderResponse     = order.CreateOrderResponse
	GetOrderListRequest     = order.GetOrderListRequest
	GetOrderListResponse    = order.GetOrderListResponse
	GetOrderRequest         = order.GetOrderRequest
	GetOrderResponse        = order.GetOrderResponse
	OrderContent            = order.OrderContent
	OrderItem               = order.OrderItem
	PayOrderRequest         = order.PayOrderRequest
	PayOrderResponse        = order.PayOrderResponse
	Paypal                  = order.Paypal
	PaypalOrderResponse     = order.PaypalOrderResponse
	PaypalOrderReuqest      = order.PaypalOrderReuqest
	SoftDeleteOrderRequest  = order.SoftDeleteOrderRequest
	SoftDeleteOrderResponse = order.SoftDeleteOrderResponse
	UpdateOrderRequest      = order.UpdateOrderRequest
	UpdateOrderResponse     = order.UpdateOrderResponse

	Order interface {
		CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
		CreateOrderRollback(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
		SoftDeleteOrder(ctx context.Context, in *SoftDeleteOrderRequest, opts ...grpc.CallOption) (*SoftDeleteOrderResponse, error)
		SoftDeleteOrderRollback(ctx context.Context, in *SoftDeleteOrderRequest, opts ...grpc.CallOption) (*SoftDeleteOrderResponse, error)
		GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
		UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error)
		PayOrder(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderResponse, error)
		OrderList(ctx context.Context, in *GetOrderListRequest, opts ...grpc.CallOption) (*GetOrderListResponse, error)
		PaypalOrder(ctx context.Context, in *PaypalOrderReuqest, opts ...grpc.CallOption) (*PaypalOrderResponse, error)
	}

	defaultOrder struct {
		cli zrpc.Client
	}
)

func NewOrder(cli zrpc.Client) Order {
	return &defaultOrder{
		cli: cli,
	}
}

func (m *defaultOrder) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

func (m *defaultOrder) CreateOrderRollback(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.CreateOrderRollback(ctx, in, opts...)
}

func (m *defaultOrder) SoftDeleteOrder(ctx context.Context, in *SoftDeleteOrderRequest, opts ...grpc.CallOption) (*SoftDeleteOrderResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.SoftDeleteOrder(ctx, in, opts...)
}

func (m *defaultOrder) SoftDeleteOrderRollback(ctx context.Context, in *SoftDeleteOrderRequest, opts ...grpc.CallOption) (*SoftDeleteOrderResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.SoftDeleteOrderRollback(ctx, in, opts...)
}

func (m *defaultOrder) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.GetOrder(ctx, in, opts...)
}

func (m *defaultOrder) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*UpdateOrderResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.UpdateOrder(ctx, in, opts...)
}

func (m *defaultOrder) PayOrder(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.PayOrder(ctx, in, opts...)
}

func (m *defaultOrder) OrderList(ctx context.Context, in *GetOrderListRequest, opts ...grpc.CallOption) (*GetOrderListResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.OrderList(ctx, in, opts...)
}

func (m *defaultOrder) PaypalOrder(ctx context.Context, in *PaypalOrderReuqest, opts ...grpc.CallOption) (*PaypalOrderResponse, error) {
	client := order.NewOrderClient(m.cli.Conn())
	return client.PaypalOrder(ctx, in, opts...)
}
