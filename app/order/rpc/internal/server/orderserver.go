// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: order.proto

package server

import (
	"context"

	"ymir.com/app/order/rpc/internal/logic"
	"ymir.com/app/order/rpc/internal/svc"
	"ymir.com/app/order/rpc/order"
)

type OrderServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderServer
}

func NewOrderServer(svcCtx *svc.ServiceContext) *OrderServer {
	return &OrderServer{
		svcCtx: svcCtx,
	}
}

func (s *OrderServer) CreateOrder(ctx context.Context, in *order.CreateOrderRequest) (*order.CreateOrderResponse, error) {
	l := logic.NewCreateOrderLogic(ctx, s.svcCtx)
	return l.CreateOrder(in)
}

func (s *OrderServer) CreateOrderRollback(ctx context.Context, in *order.CreateOrderRequest) (*order.CreateOrderResponse, error) {
	l := logic.NewCreateOrderRollbackLogic(ctx, s.svcCtx)
	return l.CreateOrderRollback(in)
}

func (s *OrderServer) DeleteOrder(ctx context.Context, in *order.DeleteOrderRequest) (*order.DeleteOrderResponse, error) {
	l := logic.NewDeleteOrderLogic(ctx, s.svcCtx)
	return l.DeleteOrder(in)
}

func (s *OrderServer) DeleteOrderRollback(ctx context.Context, in *order.DeleteOrderRequest) (*order.DeleteOrderResponse, error) {
	l := logic.NewDeleteOrderRollbackLogic(ctx, s.svcCtx)
	return l.DeleteOrderRollback(in)
}

func (s *OrderServer) GetOrder(ctx context.Context, in *order.GetOrderRequest) (*order.GetOrderResponse, error) {
	l := logic.NewGetOrderLogic(ctx, s.svcCtx)
	return l.GetOrder(in)
}

func (s *OrderServer) UpdateOrder(ctx context.Context, in *order.UpdateOrderRequest) (*order.UpdateOrderResponse, error) {
	l := logic.NewUpdateOrderLogic(ctx, s.svcCtx)
	return l.UpdateOrder(in)
}

func (s *OrderServer) PayOrder(ctx context.Context, in *order.PayOrderRequest) (*order.PayOrderResponse, error) {
	l := logic.NewPayOrderLogic(ctx, s.svcCtx)
	return l.PayOrder(in)
}

func (s *OrderServer) OrderList(ctx context.Context, in *order.GetOrderListRequest) (*order.GetOrderListResponse, error) {
	l := logic.NewOrderListLogic(ctx, s.svcCtx)
	return l.OrderList(in)
}

func (s *OrderServer) PaypalOrder(ctx context.Context, in *order.PaypalOrderReuqest) (*order.PaypalOrderResponse, error) {
	l := logic.NewPaypalOrderLogic(ctx, s.svcCtx)
	return l.PaypalOrder(in)
}

func (s *OrderServer) CreatePaypalOrder(ctx context.Context, in *order.CreatePaypalOrderRequest) (*order.CreatePaypalOrderResponse, error) {
	l := logic.NewCreatePaypalOrderLogic(ctx, s.svcCtx)
	return l.CreatePaypalOrder(in)
}

func (s *OrderServer) CaptureOrder(ctx context.Context, in *order.CapturePaypalOrderRequest) (*order.CapturePaypalOrderResposne, error) {
	l := logic.NewCaptureOrderLogic(ctx, s.svcCtx)
	return l.CaptureOrder(in)
}

func (s *OrderServer) OrderAddress(ctx context.Context, in *order.GetOrderAddressRequest) (*order.GetOrderAddressResponse, error) {
	l := logic.NewOrderAddressLogic(ctx, s.svcCtx)
	return l.OrderAddress(in)
}
