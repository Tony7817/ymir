// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	paypalFieldNames          = builder.RawFieldNames(&Paypal{})
	paypalRows                = strings.Join(paypalFieldNames, ",")
	paypalRowsExpectAutoSet   = strings.Join(stringx.Remove(paypalFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	paypalRowsWithPlaceHolder = strings.Join(stringx.Remove(paypalFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirPaypalIdPrefix        = "cache:ymir:paypal:id:"
	cacheYmirPaypalRequestIdPrefix = "cache:ymir:paypal:requestId:"
)

type (
	paypalModel interface {
		Insert(ctx context.Context, data *Paypal) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Paypal, error)
		FindOneByRequestId(ctx context.Context, requestId string) (*Paypal, error)
		Update(ctx context.Context, data *Paypal) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPaypalModel struct {
		sqlc.CachedConn
		table string
	}

	Paypal struct {
		Id            int64          `db:"id"`
		CreatedAt     time.Time      `db:"created_at"`
		UpdatedAt     time.Time      `db:"updated_at"`
		OrderId       int64          `db:"order_id"`
		RequestId     string         `db:"request_id"`
		ReqBody       sql.NullString `db:"req_body"`
		PaypalOrderId string         `db:"paypal_order_id"`
	}
)

func newPaypalModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPaypalModel {
	return &defaultPaypalModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`paypal`",
	}
}

func (m *defaultPaypalModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ymirPaypalIdKey := fmt.Sprintf("%s%v", cacheYmirPaypalIdPrefix, id)
	ymirPaypalRequestIdKey := fmt.Sprintf("%s%v", cacheYmirPaypalRequestIdPrefix, data.RequestId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirPaypalIdKey, ymirPaypalRequestIdKey)
	return err
}

func (m *defaultPaypalModel) FindOne(ctx context.Context, id int64) (*Paypal, error) {
	ymirPaypalIdKey := fmt.Sprintf("%s%v", cacheYmirPaypalIdPrefix, id)
	var resp Paypal
	err := m.QueryRowCtx(ctx, &resp, ymirPaypalIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", paypalRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaypalModel) FindOneByRequestId(ctx context.Context, requestId string) (*Paypal, error) {
	ymirPaypalRequestIdKey := fmt.Sprintf("%s%v", cacheYmirPaypalRequestIdPrefix, requestId)
	var resp Paypal
	err := m.QueryRowIndexCtx(ctx, &resp, ymirPaypalRequestIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `request_id` = ? limit 1", paypalRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, requestId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaypalModel) Insert(ctx context.Context, data *Paypal) (sql.Result, error) {
	ymirPaypalIdKey := fmt.Sprintf("%s%v", cacheYmirPaypalIdPrefix, data.Id)
	ymirPaypalRequestIdKey := fmt.Sprintf("%s%v", cacheYmirPaypalRequestIdPrefix, data.RequestId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, paypalRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.OrderId, data.RequestId, data.ReqBody, data.PaypalOrderId)
	}, ymirPaypalIdKey, ymirPaypalRequestIdKey)
	return ret, err
}

func (m *defaultPaypalModel) Update(ctx context.Context, newData *Paypal) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ymirPaypalIdKey := fmt.Sprintf("%s%v", cacheYmirPaypalIdPrefix, data.Id)
	ymirPaypalRequestIdKey := fmt.Sprintf("%s%v", cacheYmirPaypalRequestIdPrefix, data.RequestId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, paypalRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.OrderId, newData.RequestId, newData.ReqBody, newData.PaypalOrderId, newData.Id)
	}, ymirPaypalIdKey, ymirPaypalRequestIdKey)
	return err
}

func (m *defaultPaypalModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirPaypalIdPrefix, primary)
}

func (m *defaultPaypalModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", paypalRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPaypalModel) tableName() string {
	return m.table
}
