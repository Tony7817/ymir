// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderItemFieldNames          = builder.RawFieldNames(&OrderItem{})
	orderItemRows                = strings.Join(orderItemFieldNames, ",")
	orderItemRowsExpectAutoSet   = strings.Join(stringx.Remove(orderItemFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderItemRowsWithPlaceHolder = strings.Join(stringx.Remove(orderItemFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirOrderItemIdPrefix = "cache:ymir:orderItem:id:"
)

type (
	orderItemModel interface {
		Insert(ctx context.Context, data *OrderItem) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OrderItem, error)
		Update(ctx context.Context, data *OrderItem) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderItemModel struct {
		sqlc.CachedConn
		table string
	}

	OrderItem struct {
		Id             int64     `db:"id"`
		OrderId        int64     `db:"order_id"`
		CreatedAt      time.Time `db:"created_at"`
		UpdatedAt      time.Time `db:"updated_at"`
		ProductId      int64     `db:"product_id"`
		ProductColorId int64     `db:"product_color_id"`
		Size           string    `db:"size"`
		Quantity       int64     `db:"quantity"`
		Price          int64     `db:"price"`
		Subtotal       int64     `db:"subtotal"`
		IsDelete       int64     `db:"is_delete"`
	}
)

func newOrderItemModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrderItemModel {
	return &defaultOrderItemModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`order_item`",
	}
}

func (m *defaultOrderItemModel) Delete(ctx context.Context, id int64) error {
	ymirOrderItemIdKey := fmt.Sprintf("%s%v", cacheYmirOrderItemIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirOrderItemIdKey)
	return err
}

func (m *defaultOrderItemModel) FindOne(ctx context.Context, id int64) (*OrderItem, error) {
	ymirOrderItemIdKey := fmt.Sprintf("%s%v", cacheYmirOrderItemIdPrefix, id)
	var resp OrderItem
	err := m.QueryRowCtx(ctx, &resp, ymirOrderItemIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderItemRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderItemModel) Insert(ctx context.Context, data *OrderItem) (sql.Result, error) {
	ymirOrderItemIdKey := fmt.Sprintf("%s%v", cacheYmirOrderItemIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderItemRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.OrderId, data.ProductId, data.ProductColorId, data.Size, data.Quantity, data.Price, data.Subtotal, data.IsDelete)
	}, ymirOrderItemIdKey)
	return ret, err
}

func (m *defaultOrderItemModel) Update(ctx context.Context, data *OrderItem) error {
	ymirOrderItemIdKey := fmt.Sprintf("%s%v", cacheYmirOrderItemIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderItemRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrderId, data.ProductId, data.ProductColorId, data.Size, data.Quantity, data.Price, data.Subtotal, data.IsDelete, data.Id)
	}, ymirOrderItemIdKey)
	return err
}

func (m *defaultOrderItemModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirOrderItemIdPrefix, primary)
}

func (m *defaultOrderItemModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderItemRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderItemModel) tableName() string {
	return m.table
}
