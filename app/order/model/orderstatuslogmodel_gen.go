// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderStatusLogFieldNames          = builder.RawFieldNames(&OrderStatusLog{})
	orderStatusLogRows                = strings.Join(orderStatusLogFieldNames, ",")
	orderStatusLogRowsExpectAutoSet   = strings.Join(stringx.Remove(orderStatusLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderStatusLogRowsWithPlaceHolder = strings.Join(stringx.Remove(orderStatusLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirOrderStatusLogIdPrefix = "cache:ymir:orderStatusLog:id:"
)

type (
	orderStatusLogModel interface {
		Insert(ctx context.Context, data *OrderStatusLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OrderStatusLog, error)
		Update(ctx context.Context, data *OrderStatusLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderStatusLogModel struct {
		sqlc.CachedConn
		table string
	}

	OrderStatusLog struct {
		Id        int64          `db:"id"` // 日志ID
		CreatedAt time.Time      `db:"created_at"`
		UpdatedAt time.Time      `db:"updated_at"`
		OrderId   int64          `db:"order_id"`   // 订单ID
		Status    string         `db:"status"`     // 订单状态
		ChangedAt time.Time      `db:"changed_at"` // 状态变更时间
		Remark    sql.NullString `db:"remark"`     // 备注
	}
)

func newOrderStatusLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrderStatusLogModel {
	return &defaultOrderStatusLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`order_status_log`",
	}
}

func (m *defaultOrderStatusLogModel) Delete(ctx context.Context, id int64) error {
	ymirOrderStatusLogIdKey := fmt.Sprintf("%s%v", cacheYmirOrderStatusLogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirOrderStatusLogIdKey)
	return err
}

func (m *defaultOrderStatusLogModel) FindOne(ctx context.Context, id int64) (*OrderStatusLog, error) {
	ymirOrderStatusLogIdKey := fmt.Sprintf("%s%v", cacheYmirOrderStatusLogIdPrefix, id)
	var resp OrderStatusLog
	err := m.QueryRowCtx(ctx, &resp, ymirOrderStatusLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderStatusLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderStatusLogModel) Insert(ctx context.Context, data *OrderStatusLog) (sql.Result, error) {
	ymirOrderStatusLogIdKey := fmt.Sprintf("%s%v", cacheYmirOrderStatusLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, orderStatusLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.OrderId, data.Status, data.ChangedAt, data.Remark)
	}, ymirOrderStatusLogIdKey)
	return ret, err
}

func (m *defaultOrderStatusLogModel) Update(ctx context.Context, data *OrderStatusLog) error {
	ymirOrderStatusLogIdKey := fmt.Sprintf("%s%v", cacheYmirOrderStatusLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderStatusLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrderId, data.Status, data.ChangedAt, data.Remark, data.Id)
	}, ymirOrderStatusLogIdKey)
	return err
}

func (m *defaultOrderStatusLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirOrderStatusLogIdPrefix, primary)
}

func (m *defaultOrderStatusLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderStatusLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderStatusLogModel) tableName() string {
	return m.table
}
