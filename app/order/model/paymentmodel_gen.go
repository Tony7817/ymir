// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	paymentFieldNames          = builder.RawFieldNames(&Payment{})
	paymentRows                = strings.Join(paymentFieldNames, ",")
	paymentRowsExpectAutoSet   = strings.Join(stringx.Remove(paymentFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	paymentRowsWithPlaceHolder = strings.Join(stringx.Remove(paymentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirPaymentIdPrefix        = "cache:ymir:payment:id:"
	cacheYmirPaymentPaymentIdPrefix = "cache:ymir:payment:paymentId:"
)

type (
	paymentModel interface {
		Insert(ctx context.Context, data *Payment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Payment, error)
		FindOneByPaymentId(ctx context.Context, paymentId string) (*Payment, error)
		Update(ctx context.Context, data *Payment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPaymentModel struct {
		sqlc.CachedConn
		table string
	}

	Payment struct {
		Id        int64     `db:"id"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
		OrderId   int64     `db:"order_id"`
		PaymentId string    `db:"payment_id"`
		Price     int64     `db:"price"`
		Status    string    `db:"status"`
		IsDelete  int64     `db:"is_delete"`
	}
)

func newPaymentModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPaymentModel {
	return &defaultPaymentModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`payment`",
	}
}

func (m *defaultPaymentModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ymirPaymentIdKey := fmt.Sprintf("%s%v", cacheYmirPaymentIdPrefix, id)
	ymirPaymentPaymentIdKey := fmt.Sprintf("%s%v", cacheYmirPaymentPaymentIdPrefix, data.PaymentId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirPaymentIdKey, ymirPaymentPaymentIdKey)
	return err
}

func (m *defaultPaymentModel) FindOne(ctx context.Context, id int64) (*Payment, error) {
	ymirPaymentIdKey := fmt.Sprintf("%s%v", cacheYmirPaymentIdPrefix, id)
	var resp Payment
	err := m.QueryRowCtx(ctx, &resp, ymirPaymentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", paymentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentModel) FindOneByPaymentId(ctx context.Context, paymentId string) (*Payment, error) {
	ymirPaymentPaymentIdKey := fmt.Sprintf("%s%v", cacheYmirPaymentPaymentIdPrefix, paymentId)
	var resp Payment
	err := m.QueryRowIndexCtx(ctx, &resp, ymirPaymentPaymentIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `payment_id` = ? limit 1", paymentRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, paymentId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPaymentModel) Insert(ctx context.Context, data *Payment) (sql.Result, error) {
	ymirPaymentIdKey := fmt.Sprintf("%s%v", cacheYmirPaymentIdPrefix, data.Id)
	ymirPaymentPaymentIdKey := fmt.Sprintf("%s%v", cacheYmirPaymentPaymentIdPrefix, data.PaymentId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, paymentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.OrderId, data.PaymentId, data.Price, data.Status, data.IsDelete)
	}, ymirPaymentIdKey, ymirPaymentPaymentIdKey)
	return ret, err
}

func (m *defaultPaymentModel) Update(ctx context.Context, newData *Payment) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ymirPaymentIdKey := fmt.Sprintf("%s%v", cacheYmirPaymentIdPrefix, data.Id)
	ymirPaymentPaymentIdKey := fmt.Sprintf("%s%v", cacheYmirPaymentPaymentIdPrefix, data.PaymentId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, paymentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.OrderId, newData.PaymentId, newData.Price, newData.Status, newData.IsDelete, newData.Id)
	}, ymirPaymentIdKey, ymirPaymentPaymentIdKey)
	return err
}

func (m *defaultPaymentModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirPaymentIdPrefix, primary)
}

func (m *defaultPaymentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", paymentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPaymentModel) tableName() string {
	return m.table
}
