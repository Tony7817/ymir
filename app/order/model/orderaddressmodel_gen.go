// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	orderAddressFieldNames          = builder.RawFieldNames(&OrderAddress{})
	orderAddressRows                = strings.Join(orderAddressFieldNames, ",")
	orderAddressRowsExpectAutoSet   = strings.Join(stringx.Remove(orderAddressFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	orderAddressRowsWithPlaceHolder = strings.Join(stringx.Remove(orderAddressFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYmirOrderAddressIdPrefix      = "cache:ymir:orderAddress:id:"
	cacheYmirOrderAddressOrderIdPrefix = "cache:ymir:orderAddress:orderId:"
)

type (
	orderAddressModel interface {
		Insert(ctx context.Context, data *OrderAddress) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OrderAddress, error)
		FindOneByOrderId(ctx context.Context, orderId int64) (*OrderAddress, error)
		Update(ctx context.Context, data *OrderAddress) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrderAddressModel struct {
		sqlc.CachedConn
		table string
	}

	OrderAddress struct {
		Id         int64          `db:"id"`
		CreatedAt  time.Time      `db:"created_at"`
		UpdatedAt  time.Time      `db:"updated_at"`
		OrderId    int64          `db:"order_id"`
		UserId     int64          `db:"user_id"`
		FullName   string         `db:"full_name"`
		Email      string         `db:"email"`
		Address1   sql.NullString `db:"address_1"`
		Address2   sql.NullString `db:"address_2"`
		AdminArea1 sql.NullString `db:"admin_area_1"`
		AdminArea2 sql.NullString `db:"admin_area_2"`
		PostalCode string         `db:"postal_code"`
	}
)

func newOrderAddressModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrderAddressModel {
	return &defaultOrderAddressModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`order_address`",
	}
}

func (m *defaultOrderAddressModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ymirOrderAddressIdKey := fmt.Sprintf("%s%v", cacheYmirOrderAddressIdPrefix, id)
	ymirOrderAddressOrderIdKey := fmt.Sprintf("%s%v", cacheYmirOrderAddressOrderIdPrefix, data.OrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ymirOrderAddressIdKey, ymirOrderAddressOrderIdKey)
	return err
}

func (m *defaultOrderAddressModel) FindOne(ctx context.Context, id int64) (*OrderAddress, error) {
	ymirOrderAddressIdKey := fmt.Sprintf("%s%v", cacheYmirOrderAddressIdPrefix, id)
	var resp OrderAddress
	err := m.QueryRowCtx(ctx, &resp, ymirOrderAddressIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderAddressRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderAddressModel) FindOneByOrderId(ctx context.Context, orderId int64) (*OrderAddress, error) {
	ymirOrderAddressOrderIdKey := fmt.Sprintf("%s%v", cacheYmirOrderAddressOrderIdPrefix, orderId)
	var resp OrderAddress
	err := m.QueryRowIndexCtx(ctx, &resp, ymirOrderAddressOrderIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", orderAddressRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, orderId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrderAddressModel) Insert(ctx context.Context, data *OrderAddress) (sql.Result, error) {
	ymirOrderAddressIdKey := fmt.Sprintf("%s%v", cacheYmirOrderAddressIdPrefix, data.Id)
	ymirOrderAddressOrderIdKey := fmt.Sprintf("%s%v", cacheYmirOrderAddressOrderIdPrefix, data.OrderId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, orderAddressRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.OrderId, data.UserId, data.FullName, data.Email, data.Address1, data.Address2, data.AdminArea1, data.AdminArea2, data.PostalCode)
	}, ymirOrderAddressIdKey, ymirOrderAddressOrderIdKey)
	return ret, err
}

func (m *defaultOrderAddressModel) Update(ctx context.Context, newData *OrderAddress) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ymirOrderAddressIdKey := fmt.Sprintf("%s%v", cacheYmirOrderAddressIdPrefix, data.Id)
	ymirOrderAddressOrderIdKey := fmt.Sprintf("%s%v", cacheYmirOrderAddressOrderIdPrefix, data.OrderId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, orderAddressRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.OrderId, newData.UserId, newData.FullName, newData.Email, newData.Address1, newData.Address2, newData.AdminArea1, newData.AdminArea2, newData.PostalCode, newData.Id)
	}, ymirOrderAddressIdKey, ymirOrderAddressOrderIdKey)
	return err
}

func (m *defaultOrderAddressModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYmirOrderAddressIdPrefix, primary)
}

func (m *defaultOrderAddressModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", orderAddressRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrderAddressModel) tableName() string {
	return m.table
}
